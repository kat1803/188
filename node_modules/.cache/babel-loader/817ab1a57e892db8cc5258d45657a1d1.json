{"ast":null,"code":"import getChildEventSubscriber from './getChildEventSubscriber';\nimport getChildRouter from './getChildRouter';\nimport getNavigationActionCreators from './routers/getNavigationActionCreators';\nimport invariant from './utils/invariant';\n\nconst createParamGetter = route => (paramName, defaultValue) => {\n  const params = route.params;\n\n  if (params && paramName in params) {\n    return params[paramName];\n  }\n\n  return defaultValue;\n};\n\nfunction getChildNavigation(navigation, childKey, getCurrentParentNavigation) {\n  const children = navigation._childrenNavigation || (navigation._childrenNavigation = {});\n  const childRoute = navigation.state.routes.find(r => r.key === childKey);\n\n  if (!childRoute) {\n    return null;\n  }\n\n  if (children[childKey] && children[childKey].state === childRoute) {\n    return children[childKey];\n  }\n\n  const childRouter = getChildRouter(navigation.router, childRoute.routeName); // If the route has children, we'll use this to pass in to the action creators\n  // for the childRouter so that any action that depends on the active route will\n  // behave as expected. We don't explicitly require that routers implement routes\n  // and index properties, but if we did then we would put an invariant here to\n  // ensure that a focusedGrandChildRoute exists if childRouter is defined.\n\n  const focusedGrandChildRoute = childRoute.routes && typeof childRoute.index === 'number' ? childRoute.routes[childRoute.index] : null;\n  const actionCreators = { ...navigation.actions,\n    ...navigation.router.getActionCreators(childRoute, navigation.state.key),\n    ...(childRouter ? childRouter.getActionCreators(focusedGrandChildRoute, childRoute.key) : {}),\n    ...getNavigationActionCreators(childRoute)\n  };\n  const actionHelpers = {};\n  Object.keys(actionCreators).forEach(actionName => {\n    actionHelpers[actionName] = (...args) => {\n      const actionCreator = actionCreators[actionName];\n      const action = actionCreator(...args);\n      return navigation.dispatch(action);\n    };\n  });\n\n  if (children[childKey]) {\n    children[childKey] = { ...children[childKey],\n      ...actionHelpers,\n      state: childRoute,\n      router: childRouter,\n      actions: actionCreators,\n      getParam: createParamGetter(childRoute)\n    };\n    return children[childKey];\n  }\n\n  const childSubscriber = getChildEventSubscriber(navigation.addListener, childKey);\n  children[childKey] = { ...actionHelpers,\n    state: childRoute,\n    router: childRouter,\n    actions: actionCreators,\n    getParam: createParamGetter(childRoute),\n    getChildNavigation: grandChildKey => getChildNavigation(children[childKey], grandChildKey, () => {\n      const nav = getCurrentParentNavigation();\n      return nav && nav.getChildNavigation(childKey);\n    }),\n    isFocused: () => {\n      const currentNavigation = getCurrentParentNavigation();\n\n      if (!currentNavigation) {\n        return false;\n      }\n\n      const _currentNavigation$st = currentNavigation.state,\n            routes = _currentNavigation$st.routes,\n            index = _currentNavigation$st.index;\n\n      if (!currentNavigation.isFocused()) {\n        return false;\n      }\n\n      if (routes[index].key === childKey) {\n        return true;\n      }\n\n      return false;\n    },\n    dispatch: navigation.dispatch,\n    getScreenProps: navigation.getScreenProps,\n    dangerouslyGetParent: getCurrentParentNavigation,\n    addListener: childSubscriber.addListener\n  };\n  return children[childKey];\n}\n\nexport default getChildNavigation;","map":null,"metadata":{},"sourceType":"module"}