{"ast":null,"code":"import { Animated, Easing, Platform } from 'react-native';\nimport StyleInterpolator from './StackViewStyleInterpolator';\nimport { supportsImprovedSpringAnimation } from '../../utils/ReactNativeFeatures';\nlet IOSTransitionSpec;\n\nif (supportsImprovedSpringAnimation()) {\n  // These are the exact values from UINavigationController's animation configuration\n  IOSTransitionSpec = {\n    timing: Animated.spring,\n    stiffness: 1000,\n    damping: 500,\n    mass: 3\n  };\n} else {\n  // This is an approximation of the IOS spring animation using a derived bezier curve\n  IOSTransitionSpec = {\n    duration: 500,\n    easing: Easing.bezier(0.2833, 0.99, 0.31833, 0.99),\n    timing: Animated.timing\n  };\n} // Standard iOS navigation transition\n\n\nconst SlideFromRightIOS = {\n  transitionSpec: IOSTransitionSpec,\n  screenInterpolator: StyleInterpolator.forHorizontal,\n  containerStyle: {\n    backgroundColor: '#000'\n  }\n}; // Standard iOS navigation transition for modals\n\nconst ModalSlideFromBottomIOS = {\n  transitionSpec: IOSTransitionSpec,\n  screenInterpolator: StyleInterpolator.forVertical,\n  containerStyle: {\n    backgroundColor: '#000'\n  }\n}; // Standard Android navigation transition when opening an Activity\n\nconst FadeInFromBottomAndroid = {\n  // See http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/res/res/anim/activity_open_enter.xml\n  transitionSpec: {\n    duration: 350,\n    easing: Easing.out(Easing.poly(5)),\n    // decelerate\n    timing: Animated.timing\n  },\n  screenInterpolator: StyleInterpolator.forFadeFromBottomAndroid\n}; // Standard Android navigation transition when closing an Activity\n\nconst FadeOutToBottomAndroid = {\n  // See http://androidxref.com/7.1.1_r6/xref/frameworks/base/core/res/res/anim/activity_close_exit.xml\n  transitionSpec: {\n    duration: 230,\n    easing: Easing.in(Easing.poly(4)),\n    // accelerate\n    timing: Animated.timing\n  },\n  screenInterpolator: StyleInterpolator.forFadeFromBottomAndroid\n};\n\nfunction defaultTransitionConfig(transitionProps, prevTransitionProps, isModal) {\n  if (Platform.OS === 'android') {\n    // Use the default Android animation no matter if the screen is a modal.\n    // Android doesn't have full-screen modals like iOS does, it has dialogs.\n    if (prevTransitionProps && transitionProps.index < prevTransitionProps.index) {\n      // Navigating back to the previous screen\n      return FadeOutToBottomAndroid;\n    }\n\n    return FadeInFromBottomAndroid;\n  } // iOS and other platforms\n\n\n  if (isModal) {\n    return ModalSlideFromBottomIOS;\n  }\n\n  return SlideFromRightIOS;\n}\n\nfunction getTransitionConfig(transitionConfigurer, transitionProps, prevTransitionProps, isModal) {\n  const defaultConfig = defaultTransitionConfig(transitionProps, prevTransitionProps, isModal);\n\n  if (transitionConfigurer) {\n    return { ...defaultConfig,\n      ...transitionConfigurer(transitionProps, prevTransitionProps, isModal)\n    };\n  }\n\n  return defaultConfig;\n}\n\nexport default {\n  defaultTransitionConfig,\n  getTransitionConfig,\n  SlideFromRightIOS,\n  ModalSlideFromBottomIOS,\n  FadeInFromBottomAndroid,\n  FadeOutToBottomAndroid\n};","map":null,"metadata":{},"sourceType":"module"}